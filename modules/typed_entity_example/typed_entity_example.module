<?php

/**
 * @file
 * Module implementation file.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\typed_entity_example\Plugin\TypedRepositories\ArticleRepository;

/**
 * Implements hook_entity_access().
 *
 * NOTE: This is for demonstrations of the APIs. If you were to implement this
 * hook you would not want to do it this way. See the linked article for a
 * better pattern.
 *
 * @see https://www.lullabot.com/articles/maintainable-code-drupal-wrapped-entities
 */
function typed_entity_example_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $repository_manager = typed_entity_repository_manager();
  $repository = $repository_manager->repositoryFromEntity($entity);
  if (!$repository instanceof ArticleRepository) {
    return AccessResult::neutral();
  }
  $tagged_articles = $repository->findByTags(['Vegetarian', 'heaLthy', 'Baking']);
  if (count($tagged_articles) > 10000) {
    return AccessResult::forbidden('According to our requirements too many related articles causes access denied.');
  }
  $nickname = $repository_manager->wrap($entity)
    ->owner()
    ->nickname();
  return _typed_entity_example_check_inappropriate_language($nickname)
    ? AccessResult::forbidden('Nickname of the article\'s author is not appropriate.')
    : AccessResult::neutral();
}

/**
 * Fake service that checks for inappropriate words.
 *
 * @pararm string $input
 *   The string to check.
 *
 * @return bool
 *   TRUE if it contains inappropriate language.
 */
function _typed_entity_example_check_inappropriate_language(string $input): bool {
  return FALSE;
}
