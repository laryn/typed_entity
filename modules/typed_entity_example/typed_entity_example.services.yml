services:
  typed_entity_example.article:
    # If you don't have custom logic for your repository you can use the base
    # class and save yourself from writing another empty class.
    # class: Drupal\typed_entity\TypedRepositories\TypedEntityRepositoryBase
    class: Drupal\typed_entity_example\TypedRepositories\ArticleRepository
    parent: Drupal\typed_entity\TypedRepositories\TypedEntityRepositoryBase
    public: true
    tags:
      -
        name: typed_entity_repository
        entity_type_id: node
        bundle: article
        wrapper_class: Drupal\typed_entity_example\WrappedEntities\Article
    # You can call addRenderer in your code to attach a renderer to a repository.
    # If you don't need to do dynamic computations for that, make use of the DIC
    # to call that for you.
    calls:
      # Add a service that oversees the rendering process of an article when using
      # the 'summary' view mode.
      - ['addRenderer', ['@typed_entity_example.article.renderer.summary']]

  typed_entity_example.user:
    class: Drupal\typed_entity\TypedRepositories\TypedEntityRepositoryBase
    parent: Drupal\typed_entity\TypedRepositories\TypedEntityRepositoryBase
    public: true
    tags:
      -
        name: typed_entity_repository
        entity_type_id: user
        # Note that we don't need to specify the 'bundle' if the entity type does
        # not support bundles.
        wrapper_class: Drupal\typed_entity_example\WrappedEntities\User

  # It is not mandatory for renderers be services. It is just a convenience
  # so you can use the 'calls:' above to add the renderer to the repository.
  typed_entity_example.article.renderer.summary:
    class: Drupal\typed_entity_example\Render\Summary
    parent: Drupal\typed_entity\Render\TypedEntityRendererBase
