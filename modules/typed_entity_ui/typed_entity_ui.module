<?php

/**
 * @file
 * Module implementation file.
 */

use Drupal\typed_entity\Annotation\ClassWithVariantsInterface;

/**
 * Implements hook_theme().
 */
function typed_entity_ui_theme(array $existing, string $type, string $theme, string $path): array {
  return [
    'php_class_info' => [
      'variables' => [
        'class_name' => NULL,
      ],
    ],
    'class_with_variants' => [
      'variables' => [
        'object' => NULL,
        'base_class' => NULL,
      ],
    ],
    'php_class_summary' => [
      'variables' => [
        'class_name' => NULL,
        'with_comment' => TRUE,
        'with_fqn' => TRUE,
      ],
    ],
  ];
}

/**
 * Prepares variables for php_class_info templates.
 *
 * Default template: php-class-info.html.twig.
 *
 * @param array $variables
 *   An associative array containing the variables.
 */
function template_preprocess_php_class_info(array &$variables) {
  $class_name = $variables['class_name'] ?? '';
  try {
    $reflection = new \ReflectionClass($class_name);
  }
  catch (ReflectionException $e) {
    return;
  }
  $variables['name'] = [
    '#theme' => 'php_class_summary',
    '#class_name' => $reflection->getName(),
  ];
  $variables['parent'] = $reflection->getParentClass()
    ? [
      '#theme' => 'php_class_summary',
      '#class_name' => $reflection->getParentClass()->getName(),
    ]
    : '';
  $variables['interfaces'] = [
    '#title' => t('Interfaces'),
    '#theme' => 'item_list',
    '#items' => array_map(static function (string $interface) {
      return [
        '#type' => 'html_tag',
        '#tag' => 'code',
        '#value' => $interface,
        '#attributes' => ['class' => ['class-name']],
      ];
    }, array_keys($reflection->getInterfaces())),
  ];
  $variables['attributes'] = ['class' => ['php-class-info']];
}

/**
 * Prepares variables for class_with_variants templates.
 *
 * Default template: class-with-variants.html.twig.
 *
 * @param array $variables
 *   An associative array containing the variables.
 */
function template_preprocess_class_with_variants(array &$variables) {
  $object = $variables['object'];
  $fallback = NULL;
  $variants = [];
  if ($object instanceof ClassWithVariantsInterface) {
    $base_class = $variables['base_class'] ?? '';
    $base_class = class_exists($base_class) ? $base_class : '';
    $fallback = $object->getFallback($base_class);
    $variants = $object->getVariants($base_class);
  }
  $build_array = static function (string $class_name) {
    return ['#theme' => 'php_class_summary', '#class_name' => $class_name];
  };
  $variables['fallback'] = t('- None available -');
  if (!empty($fallback)) {
    $variables['fallback'] = $build_array($fallback);
  }
  $variables['variants'] = empty($variants)
    ? NULL
    : [
      '#theme' => 'item_list',
      '#items' => array_map($build_array, $variants),
    ];
  $variables['attributes'] = ['class' => ['class-with-variants']];
}

/**
 * Prepares variables for php_class_summary templates.
 *
 * Default template: php-class-summary.html.twig.
 *
 * @param array $variables
 *   An associative array containing the variables.
 */
function template_preprocess_php_class_summary(array &$variables) {
  $class_name = $variables['class_name'] ?? '';
  try {
    $reflection = new \ReflectionClass($class_name);
  }
  catch (ReflectionException $e) {
    return;
  }
  if ($variables['with_comment']) {
    $variables['doc'] = $reflection->getDocComment();
  }
  if ($variables['with_fqn']) {
    $variables['keyword'] = $reflection->isFinal() ? 'final class ' : 'class ';
    $variables['namespace'] = $reflection->getNamespaceName() . '\\';
  }
  $variables['name'] = $reflection->getShortName();
  $file_name = $reflection->getFileName();
  $regexp = preg_quote(DRUPAL_ROOT, '@');
  $file_name = preg_replace('@' . $regexp . '@', '<DRUPAL_ROOT>', $file_name);
  $variables['class_file'] = t('File: @filename', ['@filename' => $file_name]);
  $variables['attributes'] = ['class' => ['php-class-summary']];
}
