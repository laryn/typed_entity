<?php

/**
 * @file
 * Module implementation file.
 */

use Drupal\typed_entity\Annotation\ClassWithVariantsInterface;

/**
 * Implements hook_theme().
 */
function typed_entity_ui_theme($existing, $type, $theme, $path) {
  return [
    'php_class_info' => [
      'variables' => [
        'reflection' => NULL,
      ],
    ],
    'class_with_variants' => [
      'variables' => [
        'object' => NULL,
        'base_class' => NULL,
      ],
    ],
  ];
}

/**
 * Prepares variables for environment indicator element templates.
 *
 * Default template: environment-indicator.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #description, #required, #attributes.
 */
function template_preprocess_php_class_info(array &$variables) {
  $reflection = $variables['reflection'];
  assert($reflection instanceof ReflectionClass);
  $variables['name'] = $reflection->getName();
  $variables['parent'] = $reflection->getParentClass()
    ? $reflection->getParentClass()->getName()
    : '';
  $variables['interfaces'] = [
    '#title' => t('Interfaces'),
    '#theme' => 'item_list',
    '#items' => array_map(function (string $interface) {
      return [
        '#type' => 'html_tag',
        '#tag' => 'code',
        '#value' => $interface,
        '#attributes' => ['class' => ['className']],
      ];
    }, array_keys($reflection->getInterfaces())),
  ];
  $variables['doc_comment'] = $reflection->getDocComment();
  $variables['attributes'] = ['class' => ['php-class-info']];
}

/**
 * Prepares variables for environment indicator element templates.
 *
 * Default template: environment-indicator.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #description, #required, #attributes.
 */
function template_preprocess_class_with_variants(array &$variables) {
  $object = $variables['object'];
  if (!$object instanceof ClassWithVariantsInterface) {
    return;
  }
  $base_class = $variables['base_class'] ?? '';
  $base_class = class_exists($base_class) ? $base_class : '';
  $fallback = $object->getFallback($base_class);
  $variants = $object->getVariants($base_class);
  $variables['fallback'] = $fallback
    ? [
      '#type' => 'html_tag',
      '#tag' => 'code',
      '#value' => $fallback,
      '#attributes' => ['class' => ['className']],
    ]
    : t('- No fallback available -');
  $variables['variants'] = [
    '#theme' => 'item_list',
    '#items' => array_map(function (string $variant) {
      return [
        '#type' => 'html_tag',
        '#tag' => 'code',
        '#value' => $variant,
        '#attributes' => ['class' => ['className']],
      ];
    }, $variants),
  ];
  $variables['attributes'] = ['class' => ['class-with-variants']];
}
