<?php

/**
 * @file
 * Module implementation file.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\typed_entity\InvalidValueException;
use Drupal\typed_entity\Render\TypedEntityRenderContext;
use Drupal\typed_entity\Render\TypedEntityRendererInterface;
use Drupal\typed_entity\RepositoryManager;
use Drupal\typed_entity\RepositoryNotFoundException;

/**
 * Implements hook_entity_view_alter().
 */
function typed_entity_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if (!$entity instanceof EntityInterface) {
    // Unable to find the entity.
    return;
  }
  try {
    [$renderers, $wrapped_entity] = _typed_entity_find_renderers($entity, $build);
  }
  catch (InvalidValueException | RepositoryNotFoundException $e) {
    return;
  }
  $build = array_reduce($renderers, static function (array $build, TypedEntityRendererInterface $renderer) use ($wrapped_entity, $display) {
    $renderer->viewAlter($build, $wrapped_entity, $display);
    return $build;
  }, $build);
}

/**
 * Implements hook_preprocess().
 */
function typed_entity_preprocess(&$variables, $hook) {
  $entity = $variables[$hook] ?? NULL;
  if (!$entity instanceof EntityInterface) {
    return;
  }
  try {
    [$renderers, $wrapped_entity] = _typed_entity_find_renderers($entity, $variables['elements'] ?? []);
  }
  catch (InvalidValueException | RepositoryNotFoundException $e) {
    return;
  }
  $variables = array_reduce($renderers, static function (array $vars, TypedEntityRendererInterface $renderer) use ($wrapped_entity) {
    $renderer->preprocess($vars, $wrapped_entity);
    return $vars;
  }, $variables);
}

/**
 * A type hinted helper for .module files to get the repository manager.
 *
 * @return \Drupal\typed_entity\RepositoryManager
 *   The repository manager.
 */
function typed_entity_repository_manager(): RepositoryManager {
  $repository_manager = \Drupal::service(RepositoryManager::class);
  assert($repository_manager instanceof RepositoryManager);
  return $repository_manager;
}

/**
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param array $build
 *
 * @return array
 * @throws \Drupal\typed_entity\InvalidValueException
 * @throws \Drupal\typed_entity\RepositoryNotFoundException
 */
function _typed_entity_find_renderers(EntityInterface $entity, array $build): array {
  $repository_manager = \Drupal::service(RepositoryManager::class);
  assert($repository_manager instanceof RepositoryManager);
  $repository = $repository_manager->repository($entity->getEntityTypeId(), $entity->bundle());
  $context = _typed_entity_build_render_context($build);
  $renderers = $repository->rendererFactory($context);
  $wrapped_entity = $repository->wrap($entity);
  return [$renderers, $wrapped_entity];
}

/**
 * Extract the context information for rendering from the render array.
 *
 * @param array $variables
 *   The variables array.
 *
 * @return \Drupal\typed_entity\Render\TypedEntityRenderContext
 *   The render context.
 */
function _typed_entity_build_render_context(array $variables): TypedEntityRenderContext {
  // Get only the properties that start by a '#'.
  $context = new TypedEntityRenderContext();
  foreach ($variables as $key => $value) {
    if (!is_string($key) || $key[0] !== '#') {
      continue;
    }
    $name = substr($key, 1);
    $context[$name] = $value;
  }
  return $context;
}
