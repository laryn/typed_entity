<?php

/**
 * @file
 * Module implementation file.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\typed_entity\TypedEntityContext;
use Drupal\typed_entity\Render\TypedEntityRendererInterface;
use Drupal\typed_entity\RepositoryManager;
use Drupal\typed_entity\WrappedEntities\WrappedEntityInterface;

/**
 * Implements hook_entity_view_alter().
 */
function typed_entity_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  [$renderer, $wrapped_entity] = _typed_entity_find_renderer($entity, $build);
  if (!$renderer instanceof TypedEntityRendererInterface || !$wrapped_entity instanceof WrappedEntityInterface) {
    return;
  }
  $renderer->viewAlter($build, $wrapped_entity, $display);
}

/**
 * Implements hook_preprocess().
 */
function typed_entity_preprocess(&$variables, $hook) {
  $entity = $variables[$hook] ?? NULL;
  if (!$entity instanceof EntityInterface) {
    return;
  }
  [$renderer, $wrapped_entity] = _typed_entity_find_renderer($entity, $variables['elements'] ?? []);
  if (!$renderer instanceof TypedEntityRendererInterface || !$wrapped_entity instanceof WrappedEntityInterface) {
    return;
  }
  $renderer->preprocess($variables, $wrapped_entity);
}

/**
 * Implements hook_entity_display_build_alter().
 */
function typed_entity_entity_display_build_alter(&$build, $context) {
  $entity = $context['entity'] ?? NULL;
  if (!$entity instanceof EntityInterface) {
    return;
  }
  [$renderer, $wrapped_entity] = _typed_entity_find_renderer($entity, $build);
  if (!$renderer instanceof TypedEntityRendererInterface || !$wrapped_entity instanceof WrappedEntityInterface) {
    return;
  }
  $renderer->displayBuildAlter($build, $wrapped_entity, $context);
}

/**
 * Implements hook_entity_build_defaults_alter().
 */
function typed_entity_entity_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode) {
  [$renderer, $wrapped_entity] = _typed_entity_find_renderer($entity, $build);
  if (!$renderer instanceof TypedEntityRendererInterface || !$wrapped_entity instanceof WrappedEntityInterface) {
    return;
  }
  $renderer->buildDefaultsAlter($build, $wrapped_entity, $view_mode);
}

/**
 * A type hinted helper for .module files to get the repository manager.
 *
 * @return \Drupal\typed_entity\RepositoryManager
 *   The repository manager.
 */
function typed_entity_repository_manager(): RepositoryManager {
  $repository_manager = \Drupal::service(RepositoryManager::class);
  assert($repository_manager instanceof RepositoryManager);
  return $repository_manager;
}

/**
 * Finds the renderer for the entity with the render array.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 * @param array $build
 *   The render array.
 *
 * @return array
 *   The pair of wrapped entity and renderer.
 */
function _typed_entity_find_renderer(EntityInterface $entity, array $build): array {
  $repository = typed_entity_repository_manager()->repositoryFromEntity($entity);
  if (!$repository) {
    return [NULL, NULL];
  }
  $context = _typed_entity_build_render_context($build, $entity);
  $renderer = $repository->rendererFactory($context);
  $wrapped_entity = $repository->wrap($entity);
  return [$renderer, $wrapped_entity];
}

/**
 * Extract the context information for rendering from the render array.
 *
 * @param array $variables
 *   The variables array.
 * @param \Drupal\Core\Entity\EntityInterface|null $entity
 *   The entity.
 *
 * @return \Drupal\typed_entity\TypedEntityContext
 *   The render context.
 */
function _typed_entity_build_render_context(array $variables, EntityInterface $entity = NULL): TypedEntityContext {
  // Get only the properties that start by a '#'.
  $context = new TypedEntityContext();
  foreach ($variables as $key => $value) {
    if (!is_string($key) || $key[0] !== '#') {
      continue;
    }
    $name = substr($key, 1);
    $context[$name] = $value;
  }
  if ($entity && !$context->offsetExists('entity')) {
    $context->offsetSet('entity', $entity);
  }
  return $context;
}
